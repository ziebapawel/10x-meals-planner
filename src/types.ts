import type { Tables } from "./db/database.types";

/**
 * =================================================================================
 * SHARED DTOs & COMMANDS
 * =================================================================================
 */

/**
 * Represents the structure of a recipe.
 * This is stored as JSON in the `recipe_data` column of the `meals` table.
 */
export interface RecipeDto {
  name: string;
  ingredients: { item: string; quantity: string }[];
  instructions: string[];
  portions: { person: number; grams: number }[];
}

/**
 * =================================================================================
 * MEAL PLAN DTOs & COMMANDS
 * =================================================================================
 */

/**
 * Command model for generating a new meal plan using the AI service.
 * The structure of this command is stored as JSON in the `plan_input` column
 * of the `meal_plans` table.
 */
export interface GenerateMealPlanCommand {
  peopleCount: number;
  daysCount: number;
  cuisine: string;
  excludedIngredients: string[];
  calorieTargets: { person: number; calories: number }[];
  mealsToPlan: string[];
}

/**
 * DTO for a single meal within a generated meal plan.
 */
export interface MealInPlanDto {
  type: string;
  recipe: RecipeDto;
}

/**
 * DTO for a single day's plan within a generated meal plan.
 */
export interface DayPlanDto {
  day: number;
  meals: MealInPlanDto[];
}

/**
 * DTO for the entire meal plan generated by the AI service.
 * This is the response from the `/api/meal-plans/generate` endpoint.
 */
export interface GeneratedMealPlanDto {
  plan: {
    days: DayPlanDto[];
  };
}

/**
 * Represents a meal to be created in the database as part of a new meal plan.
 * It uses a strongly-typed `recipeData` instead of a generic JSON type.
 */
export type MealToCreate = Omit<Tables<"meals">, "id" | "created_at" | "plan_id" | "recipe_data"> & {
  recipeData: RecipeDto;
};

/**
 * Command model for creating and saving a new meal plan.
 * This is the request body for the `POST /api/meal-plans` endpoint.
 */
export interface CreateMealPlanCommand {
  planInput: GenerateMealPlanCommand;
  meals: MealToCreate[];
}

/**
 * DTO for a meal plan record as stored in the database.
 * Corresponds to a row in the `meal_plans` table.
 */
export type MealPlanDto = Tables<"meal_plans">;

/**
 * DTO for a single meal plan item in a list.
 * This is a subset of the full MealPlanDto.
 */
export type MealPlanListItemDto = Pick<MealPlanDto, "id" | "created_at" | "plan_input">;

/**
 * DTO for pagination information.
 */
export interface PaginationDto {
  currentPage: number;
  pageSize: number;
  totalPages: number;
}

/**
 * DTO for the paginated list of meal plans.
 * This is the response from the `GET /api/meal-plans` endpoint.
 */
export interface ListMealPlansDto {
  data: MealPlanListItemDto[];
  pagination: PaginationDto;
}

/**
 * DTO for the detailed view of a single meal plan, including its meals and
 * shopping list. This is the response from `GET /api/meal-plans/{planId}`.
 */
export type MealPlanDetailsDto = MealPlanDto & {
  meals: MealDto[];
  shoppingList?: ShoppingListDto | null;
};

/**
 * =================================================================================
 * MEAL DTOs & COMMANDS
 * =================================================================================
 */

/**
 * DTO for a single meal record as stored in the database.
 * Corresponds to a row in the `meals` table, but with a typed `recipe_data`.
 */
export type MealDto = Omit<Tables<"meals">, "recipe_data"> & {
  recipe_data: RecipeDto;
};

/**
 * Command model for regenerating a single meal.
 * This is the request body for the `POST /api/meals/regenerate` endpoint.
 */
export interface RegenerateMealCommand {
  planInput: GenerateMealPlanCommand;
  mealToRegenerate: {
    day: number;
    type: string;
  };
  existingMealsForDay: {
    type: string;
    recipe: {
      name: string;
      portions: { person: number; grams: number }[];
    };
  }[];
}

/**
 * DTO for a regenerated meal.
 * This is the response from the `/api/meals/regenerate` endpoint.
 */
export interface RegeneratedMealDto {
  day: number;
  type: string;
  recipe: RecipeDto;
}

/**
 * =================================================================================
 * SHOPPING LIST DTOs & COMMANDS
 * =================================================================================
 */

/**
 * Represents a single item in the shopping list.
 */
export interface ShoppingListItem {
  item: string;
  quantity: string;
}

/**
 * Represents the structured content of a shopping list, with items grouped
 * by category. This is stored as JSON in the `list_content` column.
 */
export type ShoppingListContent = Record<string, ShoppingListItem[]>;

/**
 * DTO for a shopping list.
 * Corresponds to a row in the `shopping_lists` table, but with typed `list_content`.
 */
export type ShoppingListDto = Omit<Tables<"shopping_lists">, "list_content"> & {
  list_content: ShoppingListContent;
};
