-- migration: create_initial_schema
-- description: sets up the initial database schema for the meals planner application.
-- created_at: 2025-10-11 14:00:00 UTC

--
-- create table: meal_plans
-- description: stores the configuration and metadata for each meal plan generated by a user.
--
create table meal_plans (
    id uuid primary key default gen_random_uuid(),
    user_id uuid not null references auth.users(id) on delete cascade,
    plan_input jsonb not null,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

-- add comments to meal_plans table and columns for clarity
comment on table meal_plans is 'stores the configuration and metadata for each meal plan generated by a user.';
comment on column meal_plans.id is 'unique identifier for the meal plan.';
comment on column meal_plans.user_id is 'id of the user who owns the plan.';
comment on column meal_plans.plan_input is 'user''s input from the generation form.';
comment on column meal_plans.created_at is 'timestamp of when the plan was created.';
comment on column meal_plans.updated_at is 'timestamp of the last update.';

--
-- create table: meals
-- description: stores the details for each individual meal within a meal plan.
--
create table meals (
    id uuid primary key default gen_random_uuid(),
    plan_id uuid not null references meal_plans(id) on delete cascade,
    recipe_data jsonb not null,
    day integer not null,
    type text not null,
    created_at timestamptz not null default now()
);

-- add comments to meals table and columns for clarity
comment on table meals is 'stores the details for each individual meal within a meal plan.';
comment on column meals.id is 'unique identifier for the meal.';
comment on column meals.plan_id is 'id of the meal plan this meal belongs to.';
comment on column meals.recipe_data is 'detailed recipe, ingredients, and portions.';
comment on column meals.day is 'the day number within the plan (e.g., 1-7).';
comment on column meals.type is 'type of meal (e.g., ''breakfast'', ''dinner'').';
comment on column meals.created_at is 'timestamp of when the meal was created.';

--
-- create table: shopping_lists
-- description: stores the aggregated shopping list for a specific meal plan.
--
create table shopping_lists (
    id uuid primary key default gen_random_uuid(),
    plan_id uuid not null unique references meal_plans(id) on delete cascade,
    list_content jsonb not null,
    created_at timestamptz not null default now()
);

-- add comments to shopping_lists table and columns for clarity
comment on table shopping_lists is 'stores the aggregated shopping list for a specific meal plan.';
comment on column shopping_lists.id is 'unique identifier for the shopping list.';
comment on column shopping_lists.plan_id is 'id of the associated meal plan.';
comment on column shopping_lists.list_content is 'categorized list of ingredients and amounts.';
comment on column shopping_lists.created_at is 'timestamp of when the list was generated.';

--
-- create indexes for performance
-- description: adds indexes on foreign key columns to optimize query performance.
--
create index on meal_plans (user_id);
create index on meals (plan_id);

--
-- enable row level security (rls)
-- description: enable rls for all tables to ensure data privacy and security.
--

-- meal_plans rls policies
alter table meal_plans enable row level security;

create policy "allow authenticated users to select their own meal plans" on meal_plans
for select to authenticated using (auth.uid() = user_id);

create policy "allow authenticated users to insert meal plans" on meal_plans
for insert to authenticated with check (auth.uid() = user_id);

create policy "allow authenticated users to update their own meal plans" on meal_plans
for update to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy "allow authenticated users to delete their own meal plans" on meal_plans
for delete to authenticated using (auth.uid() = user_id);

-- meals rls policies
alter table meals enable row level security;

create policy "allow authenticated users to select meals from their own plans" on meals
for select to authenticated using (exists (select 1 from meal_plans where meal_plans.id = meals.plan_id and meal_plans.user_id = auth.uid()));

create policy "allow authenticated users to insert meals for their own plans" on meals
for insert to authenticated with check (exists (select 1 from meal_plans where meal_plans.id = meals.plan_id and meal_plans.user_id = auth.uid()));

create policy "allow authenticated users to update meals in their own plans" on meals
for update to authenticated using (exists (select 1 from meal_plans where meal_plans.id = meals.plan_id and meal_plans.user_id = auth.uid())) with check (exists (select 1 from meal_plans where meal_plans.id = meals.plan_id and meal_plans.user_id = auth.uid()));

create policy "allow authenticated users to delete meals from their own plans" on meals
for delete to authenticated using (exists (select 1 from meal_plans where meal_plans.id = meals.plan_id and meal_plans.user_id = auth.uid()));

-- shopping_lists rls policies
alter table shopping_lists enable row level security;

create policy "allow authenticated users to see their own shopping lists" on shopping_lists
for select to authenticated using (exists (select 1 from meal_plans where meal_plans.id = shopping_lists.plan_id and meal_plans.user_id = auth.uid()));

create policy "allow authenticated users to create shopping lists for their own plans" on shopping_lists
for insert to authenticated with check (exists (select 1 from meal_plans where meal_plans.id = shopping_lists.plan_id and meal_plans.user_id = auth.uid()));

create policy "allow authenticated users to update their own shopping lists" on shopping_lists
for update to authenticated using (exists (select 1 from meal_plans where meal_plans.id = shopping_lists.plan_id and meal_plans.user_id = auth.uid())) with check (exists (select 1 from meal_plans where meal_plans.id = shopping_lists.plan_id and meal_plans.user_id = auth.uid()));

create policy "allow authenticated users to delete their own shopping lists" on shopping_lists
for delete to authenticated using (exists (select 1 from meal_plans where meal_plans.id = shopping_lists.plan_id and meal_plans.user_id = auth.uid()));
